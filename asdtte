import scipy.stats as stats
import numpy as np

def t_test(df, column_name, one_sample=None, two_sample=None, random_samples=None):
    """
    Perform one-sample and two-sample T-tests on the specified column of the dataframe
    after checking the assumptions of normality, homogeneity of variances, and different random samples.
    
    Args:
        df (pd.DataFrame): Input dataframe.
        column_name (str): Name of the column on which T-tests will be performed.
        one_sample (float): Value for one-sample T-test. If provided, function performs one-sample T-test.
        two_sample (str): Name of the second column for two-sample T-test. If provided, function performs two-sample T-test.
        random_samples (list of pd.Series): List of different random samples of the same dataset.
    
    Returns:
        dict: Dictionary containing T-test results if assumptions are met, otherwise an error message.
    """
    try:
        # Check normality using three different tests
        _, shapiro_p_value = stats.shapiro(df[column_name])
        _, ks_p_value = stats.kstest(df[column_name], 'norm')
        _, dagostino_p_value = stats.normaltest(df[column_name])
        
        # Check homogeneity of variances using Levene's test
        _, homogeneity_p_value = stats.levene(df[column_name], df[two_sample])
        
        # Check if random samples are different samples from the same dataset
        if random_samples and all(isinstance(sample, pd.Series) for sample in random_samples):
            random_samples_means = [sample.mean() for sample in random_samples]
            unique_means = len(set(random_samples_means))
            if unique_means == len(random_samples_means):
                random_samples_variances = [sample.var() for sample in random_samples]
                unique_variances = len(set(random_samples_variances))
                if unique_variances == len(random_samples_variances):
                    if shapiro_p_value > 0.05 and ks_p_value > 0.05 and dagostino_p_value > 0.05 and homogeneity_p_value > 0.05:
                        results = {}
                        
                        # One-sample T-test
                        if one_sample is not None:
                            t_stat, p_value = stats.ttest_1samp(df[column_name], one_sample)
                            results['one_sample_t_test'] = {'t_statistic': t_stat, 'p_value': p_value}
                        
                        # Two-sample T-test
                        if two_sample is not None:
                            t_stat, p_value = stats.ttest_ind(df[column_name], df[two_sample])
                            results['two_sample_t_test'] = {'t_statistic': t_stat, 'p_value': p_value}
                        
                        return results
                    
                    else:
                        return "Assumptions are not met. Shapiro-Wilk p-value: {}, Kolmogorov-Smirnov p-value: {}, D'Agostino and Pearson p-value: {}, Homogeneity test p-value: {}".format(shapiro_p_value, ks_p_value, dagostino_p_value, homogeneity_p_value)
                else:
                    return "Random samples have different variances."
            else:
                return "Random samples have different means."
        else:
            return "Invalid random samples provided."
    
    except Exception as e:
        return str(e)

# Example usage:
# Assuming df is your dataframe, column_name is the column you want to perform T-test on,
# one_sample is the value for one-sample T-test, two_sample is the name of the second column for two-sample T-test,
# and random_samples is a list of different random samples of the same dataset (each sample as a pd.Series)
# result = t_test(df, 'column_name', one_sample=5, two_sample='other_column_name', random_samples=[sample1, sample2, sample3])
# print(result)







import scipy.stats as stats
import matplotlib.pyplot as plt
import numpy as np

def test_normality(data):
    """
    Test the normality of the data using Shapiro-Wilk, Kolmogorov-Smirnov,
    D'Agostino's, and Anderson-Darling tests. Generate Q-Q plot and P-P plot.
    
    Args:
        data (array-like): Input data to be tested for normality.
    
    Returns:
        dict: Dictionary containing test results and plots.
    """
    # Perform normality tests
    shapiro_stat, shapiro_p_value = stats.shapiro(data)
    ks_stat, ks_p_value = stats.kstest(data, 'norm')
    dagostino_stat, dagostino_p_value = stats.normaltest(data)
    anderson_stat = stats.anderson(data, dist='norm')
    
    # Generate Q-Q plot
    plt.figure(figsize=(12, 4))
    plt.subplot(1, 2, 1)
    stats.probplot(data, dist="norm", plot=plt)
    plt.title('Q-Q Plot')
    
    # Generate P-P plot
    plt.subplot(1, 2, 2)
    sorted_data = np.sort(data)
    probabilities = np.arange(1, len(sorted_data) + 1) / (len(sorted_data) + 1)
    expected_quantiles = stats.norm.ppf(probabilities)
    plt.plot(expected_quantiles, sorted_data, marker='o', linestyle='None')
    plt.title('P-P Plot')
    plt.xlabel('Theoretical Quantiles')
    plt.ylabel('Ordered Values')
    
    plt.tight_layout()
    plt.show()
    
    # Prepare results
    results = {
        'Shapiro-Wilk Test': {'Statistic': shapiro_stat, 'p-value': shapiro_p_value},
        'Kolmogorov-Smirnov Test': {'Statistic': ks_stat, 'p-value': ks_p_value},
        'D\'Agostino\'s Test': {'Statistic': dagostino_stat, 'p-value': dagostino_p_value},
        'Anderson-Darling Test': {'Statistic': anderson_stat.statistic, 'Critical Values': anderson_stat.critical_values}
    }
    
    return results

# Example usage:
# Assuming data is your array-like input data to be tested for normality
# results = test_normality(data)
# print(results)

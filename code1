# Import necessary libraries
import pandas as pd
from pmdarima.arima import auto_arima
from sklearn.metrics import mean_squared_error
from math import sqrt
def auto_arima_train_test(time_series_df, train_end_date, test_start_date):
    train_data = time_series_df[:train_end_date]['Value']
    test_data = time_series_df[test_start_date:]['Value']
    model = auto_arima(train_data, seasonal=True, stepwise=True, suppress_warnings=True)
    predictions = model.predict(n_periods=len(test_data))
    rmse = sqrt(mean_squared_error(test_data, predictions))
    return predictions, rmse

train_end_date = '2015-01-31'
test_start_date = '2015-02-28'
predictions, rmse = auto_arima_train_test(df, train_end_date, test_start_date)
print("Predictions for the test set:", predictions)
print("Root Mean Square Error (RMSE) on test values:", rmse)




# Import necessary libraries
import pandas as pd
from statsmodels.tsa.stattools import adfuller

# Function to test stationarity of time series data
def test_stationarity(time_series_data):
    # Perform Augmented Dickey-Fuller test
    result = adfuller(time_series_data)
    
    # Extract and print test results
    print("Augmented Dickey-Fuller Test Results:")
    output = pd.Series(result[0:4], index=['Test Statistic', 'P-Value', 'Lags Used', 'Number of Observations Used'])
    for key, value in result[4].items():
        output['Critical Value (%s)' % key] = value
    
    print(output)
    
    # Check p-value and provide interpretation
    print("\nTest Conclusion:")
    if result[1] <= 0.05:
        print("Result: Data is stationary. Reject the null hypothesis.")
    else:
        print("Result: Data is non-stationary. Fail to reject the null hypothesis.")
    print("\nAdditional Information:")
    print("1. A smaller Test Statistic and large number of Lags Used suggest a more stationary series.")
    print("2. Compare Test Statistic with Critical Values for confidence levels (1%, 5%, 10%).")
    print("   If Test Statistic is less than Critical Value, data is stationary.")
    print("   Critical Values provide a threshold above which the null hypothesis can be rejected.")
    print("   Lower Critical Values indicate higher confidence in stationarity.")

# Example usage
if __name__ == "__main__":
    # Get user input for time series data (assuming comma-separated values)
    input_data = input("Enter your time series data (comma-separated values): ")
    try:
        # Convert input data to a list of floats
        time_series_data = list(map(float, input_data.split(',')))
        
        # Call the function with user input data
        test_stationarity(time_series_data)
    except ValueError:
        print("Error: Invalid input. Please enter comma-separated numeric values.")







# Import necessary libraries
import pandas as pd
from pmdarima.arima import auto_arima
from itertools import product

# Function to apply AutoARIMA model using grid search on the given time series data
def fit_best_autoarima(time_series_data):
    # Convert the time series data to a pandas Series (if it's not already)
    time_series = pd.Series(time_series_data)
    
    # Define possible values for p, d, q (non-seasonal) and P, D, Q (seasonal)
    p_values = range(0, 3)  # Example range, you can adjust these based on your data
    d_values = range(0, 2)  # Example range, you can adjust these based on your data
    q_values = range(0, 3)  # Example range, you can adjust these based on your data
    P_values = range(0, 3)  # Example range, you can adjust these based on your data
    D_values = range(0, 2)  # Example range, you can adjust these based on your data
    Q_values = range(0, 3)  # Example range, you can adjust these based on your data
    
    # Generate all possible combinations of parameters
    grid = product(p_values, d_values, q_values, P_values, D_values, Q_values)
    
    best_model = None
    best_aic = float("inf")  # Set initial best AIC to infinity
    best_bic = float("inf")  # Set initial best BIC to infinity
    
    # Iterate through possible combinations and select the best model
    for params in grid:
        try:
            # Fit AutoARIMA model for the current combination of parameters
            model = auto_arima(time_series, seasonal=True, m=12,
                               stepwise=True, trace=False,
                               suppress_warnings=True, 
                               error_action='ignore', 
                               max_order=None,
                               seasonal_order=params)
            
            # Calculate AIC and BIC for the current model
            aic = model.aic()
            bic = model.bic()
            
            # Update best model if the current model has lower AIC and BIC
            if aic < best_aic and bic < best_bic:
                best_aic = aic
                best_bic = bic
                best_model = model
        except Exception as e:
            continue
    
    # Print the summary of the best fitted model
    print("Best AutoARIMA Model Summary:")
    print(best_model.summary())
    
    return best_model

# Example usage
if __name__ == "__main__":
    # Get user input for time series data (assuming comma-separated values)
    input_data = input("Enter your time series data (comma-separated values): ")
    try:
        # Convert input data to a list of floats
        time_series_data = list(map(float, input_data.split(',')))
        
        # Call the function with user input data
        best_model = fit_best_autoarima(time_series_data)
        
        # You can use the best fitted model for making predictions, forecast, etc.
        # For example: best_model.predict(n_periods=5) for forecasting the next 5 values
    except ValueError:
        print("Error: Invalid input. Please enter comma-separated numeric values.")







# Import necessary libraries
import pandas as pd
from pmdarima.arima import auto_arima
from itertools import product

# Function to apply SARIMA model using grid search on the given time series data
def fit_best_sarima(time_series_data):
    # Convert the time series data to a pandas Series (if it's not already)
    time_series = pd.Series(time_series_data)
    
    # Define possible values for p, d, q (non-seasonal) and P, D, Q, s (seasonal)
    p_values = range(0, 3)  # Example range, you can adjust these based on your data
    d_values = range(0, 2)  # Example range, you can adjust these based on your data
    q_values = range(0, 3)  # Example range, you can adjust these based on your data
    P_values = range(0, 3)  # Example range, you can adjust these based on your data
    D_values = range(0, 2)  # Example range, you can adjust these based on your data
    Q_values = range(0, 3)  # Example range, you can adjust these based on your data
    s_values = [12]  # Example seasonal periods, adjust as needed
    
    # Generate all possible combinations of parameters
    grid = product(p_values, d_values, q_values, P_values, D_values, Q_values, s_values)
    
    best_model = None
    best_aic = float("inf")  # Set initial best AIC to infinity
    best_bic = float("inf")  # Set initial best BIC to infinity
    
    # Iterate through possible combinations and select the best model
    for params in grid:
        try:
            # Fit SARIMA model for the current combination of parameters
            model = auto_arima(time_series, seasonal=True, m=params[6],
                               stepwise=True, trace=False,
                               suppress_warnings=True, 
                               error_action='ignore', 
                               max_order=None,
                               seasonal_order=(params[3], params[4], params[5], params[6]))
            
            # Calculate AIC and BIC for the current model
            aic = model.aic()
            bic = model.bic()
            
            # Update best model if the current model has lower AIC and BIC
            if aic < best_aic and bic < best_bic:
                best_aic = aic
                best_bic = bic
                best_model = model
        except Exception as e:
            continue
    
    # Print the summary of the best fitted model
    print("Best SARIMA Model Summary:")
    print(best_model.summary())
    
    return best_model

# Example usage
if __name__ == "__main__":
    # Get user input for time series data (assuming comma-separated values)
    input_data = input("Enter your time series data (comma-separated values): ")
    try:
        # Convert input data to a list of floats
        time_series_data = list(map(float, input_data.split(',')))
        
        # Call the function with user input data
        best_model = fit_best_sarima(time_series_data)
        
        # You can use the best fitted SARIMA model for making predictions, forecast, etc.
        # For example: best_model.predict(n_periods=5) for forecasting the next 5 values
    except ValueError:
        print("Error: Invalid input. Please enter comma-separated numeric values.")






# Import necessary libraries
import pandas as pd
import numpy as np
from pmdarima.arima import ADFTest

# Function to find the optimum differencing lag for stationarity
def find_optimum_lag(time_series_data, max_lag=10):
    # Convert the time series data to a pandas Series (if it's not already)
    time_series = pd.Series(time_series_data)
    
    # Perform Augmented Dickey-Fuller test at different lags and find the optimal lag
    adf_test = ADFTest(alpha=0.05, test='adf', seasonal=False, stepwise=True)
    best_lag = None
    min_p_value = float('inf')
    
    for lag in range(1, max_lag + 1):
        # Calculate differences for the current lag
        differenced_series = time_series.diff(periods=lag).dropna()
        
        # Perform Augmented Dickey-Fuller test for stationarity
        p_value = adf_test.should_diff(differenced_series)
        
        # Update the optimal lag if the current p-value is lower
        if p_value < min_p_value:
            min_p_value = p_value
            best_lag = lag
    
    return best_lag, min_p_value

# Example usage
if __name__ == "__main__":
    # Get user input for time series data (assuming comma-separated values)
    input_data = input("Enter your time series data (comma-separated values): ")
    try:
        # Convert input data to a list of floats
        time_series_data = list(map(float, input_data.split(',')))
        
        # Find the optimum differencing lag for stationarity
        optimum_lag, min_p_value = find_optimum_lag(time_series_data)
        
        if min_p_value < 0.05:
            print(f"Optimum Differencing Lag for Stationarity: {optimum_lag} (p-value: {min_p_value:.4f})")
        else:
            print("No significant p-value found. Data might not be stationary even with differencing.")
    except ValueError:
        print("Error: Invalid input. Please enter comma-separated numeric values.")



# Import necessary libraries
import pandas as pd
from statsmodels.tsa.stattools import adfuller

# Function to find the optimum differencing lag for stationarity
def find_optimum_lag(time_series_data, max_lag=10):
    # Convert the time series data to a pandas Series (if it's not already)
    time_series = pd.Series(time_series_data)
    
    best_lag = None
    min_p_value = float('inf')
    
    for lag in range(1, max_lag + 1):
        # Calculate differences for the current lag
        differenced_series = time_series.diff(periods=lag).dropna()
        
        # Perform Augmented Dickey-Fuller test for stationarity
        result = adfuller(differenced_series)
        p_value = result[1]
        
        # Update the optimal lag if the current p-value is lower
        if p_value < min_p_value:
            min_p_value = p_value
            best_lag = lag
    
    return best_lag, min_p_value

# Example usage
if __name__ == "__main__":
    # Get user input for time series data (assuming comma-separated values)
    input_data = input("Enter your time series data (comma-separated values): ")
    try:
        # Convert input data to a list of floats
        time_series_data = list(map(float, input_data.split(',')))
        
        # Find the optimum differencing lag for stationarity
        optimum_lag, min_p_value = find_optimum_lag(time_series_data)
        
        if min_p_value < 0.05:
            print(f"Optimum Differencing Lag for Stationarity: {optimum_lag} (p-value: {min_p_value:.4f})")
        else:
            print("No significant p-value found. Data might not be stationary even with differencing.")
    except ValueError:
        print("Error: Invalid input. Please enter comma-separated numeric values.")











# Import necessary libraries
import pandas as pd
import numpy as np
from pmdarima.arima import auto_arima
from sklearn.metrics import mean_squared_error
from math import sqrt

# Function to perform AutoARIMA modeling, train-test split, and calculate RMSE
def auto_arima_train_test(time_series_data, train_end_date, test_start_date):
    # Convert the time series data to a pandas DataFrame
    df = pd.DataFrame({'Date': pd.date_range(start='2010-01-01', periods=len(time_series_data), freq='M'),
                       'Value': time_series_data})
    
    # Split the data into train and test sets based on user-defined dates
    train_data = df[df['Date'] <= train_end_date]['Value']
    test_data = df[(df['Date'] >= test_start_date) & (df['Date'] <= df['Date'].max())]['Value']
    
    # Perform AutoARIMA modeling
    model = auto_arima(train_data, seasonal=True, stepwise=True, suppress_warnings=True)
    
    # Make predictions for the test set
    predictions = model.predict(n_periods=len(test_data))
    
    # Calculate RMSE
    rmse = sqrt(mean_squared_error(test_data, predictions))
    
    # Return predictions and RMSE
    return predictions, rmse

# Example usage with user-defined train and test end dates
if __name__ == "__main__":
    # Example time series data (replace this with your own data)
    time_series_data = [100, 110, 120, 115, 105, 95, 85, 90, 100, 110, 120, 125, 130, 140, 150, 160, 170, 180, 185, 190]
    
    # Get user input for train end date and test start date
    train_end_date = input("Enter the training end date (YYYY-MM): ")
    test_start_date = input("Enter the testing start date (YYYY-MM): ")
    
    # Call the function with the example time series data and user-defined dates
    predictions, rmse = auto_arima_train_test(time_series_data, train_end_date, test_start_date)
    
    # Print predictions and RMSE
    print("Predictions for the test set:", predictions)
    print("Root Mean Square Error (RMSE) on test values:", rmse)






